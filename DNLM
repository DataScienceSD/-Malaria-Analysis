###########################################################################
###########################################################################
####################ABOUT THE ANALTYSIS ###################################

#Distributed Lag Non-linear Model (DLNM) that accounts for climatic variables effects on malaria cases, adjusted for population.
#•	A vertical dashed line is the reference temperature  where the RR is set to 1.
#•	The curve shows a non-linear relationship between temperature and malaria risk
#•	The shaded area around the curve represents the confidence interval (likely 95%), indicating the uncertainty in the RR estimates.

###########################################################################
###########################################################################


# Load required libraries
library(dplyr)
library(ggplot2)
library(dlnm)      # For Distributed Lag Non-linear Models
library(splines)   # For smoothing splines
library(viridis)   # For color scales

# Step 1: Generate a sample dataset
set.seed(123)

# Parameters
districts <- c("cuamba", "monapo", "buzi", "funhalouro", "luabo")
years <- 2017:2023
months <- 1:12

#Load dataset
data <- read.csv("malaria sample.csv", stringsAsFactors = FALSE)


# Simulate missing population data in 2023 for some districts
data <- data %>%
  mutate(
    population = ifelse(year == 2023 & district %in% c("cuamba", "monapo", "luabo"),
                        NA, population)
  )

# Remove rows with NA population data
data <- data %>%
  filter(!is.na(population))

# Step 2: Calculate malaria incidence (cases per 1,000 population)
data$incidence <- (data$malaria.cases / data$population) * 1000

# Step 3: Create lag variables for temperature and precipitation (lags 0 to 3 months)
for (lag in 1:3) {
  data[[paste0("tmax_lag", lag)]] <- ave(data$max.temp, data$district, FUN = function(x) lag(x, lag))
  data[[paste0("precip_lag", lag)]] <- ave(data$precipitation, data$district, FUN = function(x) lag(x, lag))
}

# Step 4: Fit the Distributed Lag Non-Linear Model (DLNM)
# Create crossbasis for temperature and precipitation with lags 0 to 3 months
cb_temp <- crossbasis(data$max.temp, lag = 3, 
                      argvar = list(fun = "ns", df = 4),  # Smoothing splines for temperature
                      arglag = list(fun = "ns", df = 2))  # Smoothing splines for lag effects

cb_precip <- crossbasis(data$precipitation, lag = 3, 
                        argvar = list(fun = "ns", df = 3),  # Smoothing splines for precipitation
                        arglag = list(fun = "ns", df = 2))  # Smoothing splines for lag effects

# Fit a Poisson model with DLNM components (log-link for incidence)
model <- glm(malaria.cases ~ cb_temp + cb_precip,
             family = poisson(link = "log"),
             offset = log(data$population),  # Offset for population size
             data = data)

summary(model)

# Step 5: Predict Relative Risk (RR) for temperature, holding precipitation at median
temp_range <- seq(min(data$max.temp, na.rm = TRUE), 
                  max(data$max.temp, na.rm = TRUE), 
                  length.out = 100)

pred_temp <- crosspred(cb_temp, model, at = temp_range, cen = median(data$max.temp, na.rm = TRUE))

# Step 6: Extract and prepare prediction data
pred_data <- data.frame(
  average.temp = temp_range,
  rr = pred_temp$allRRfit,
  rr_lower = pred_temp$allRRlow,
  rr_upper = pred_temp$allRRhigh
)

# Step 7: Plot the results
ggplot(pred_data, aes(x = average.temp, y = rr)) +
  geom_line(color = "black", size = 1) +
  geom_ribbon(aes(ymin = rr_lower, ymax = rr_upper),
              fill = "pink", alpha = 0.5) +
  geom_vline(xintercept = median(data$max.temp, na.rm = TRUE), 
             linetype = "dashed", color = "black") +
  annotate("text", x = median(data$max.temp, na.rm = TRUE), 
           y = max(pred_data$rr, na.rm = TRUE) * 0.95,
           label = paste("Reference =", round(median(data$max.temp, na.rm = TRUE), 1)),
           hjust = -0.1, vjust = 1) +
  labs(title = "Mean Temperature vs Malaria Relative Risk",
       x = "Mean Temperature (°C)",
       y = "Relative Risk (RR)") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5))

# Step 8: Optional - Geospatial analysis (Optional based on your data)
# You can include additional geospatial steps here if needed using sf, gstat, or other packages.


#####################################################################
########################################################################
####################SINGLE PLOTS FOR EACH DISTRICT ###########################
#################################################################################
#######################################################################################


# Filter data for the specific district (e.g., "cuamba")
district_data <- data %>% filter(district == "cuamba")

# Step 4: Fit the Distributed Lag Non-Linear Model (DLNM) for a specific district
# Create crossbasis for temperature and precipitation with lags 0 to 3 months
cb_temp <- crossbasis(district_data$max.temp, lag = 3, 
                      argvar = list(fun = "ns", df = 4),  # Smoothing splines for temperature
                      arglag = list(fun = "ns", df = 2))  # Smoothing splines for lag effects

cb_precip <- crossbasis(district_data$precipitation, lag = 3, 
                        argvar = list(fun = "ns", df = 3),  # Smoothing splines for precipitation
                        arglag = list(fun = "ns", df = 2))  # Smoothing splines for lag effects

# Fit a Poisson model with DLNM components (log-link for incidence)
model <- glm(malaria.cases ~ cb_temp + cb_precip,
             family = poisson(link = "log"),
             offset = log(district_data$population),  # Offset for population size
             data = district_data)

summary(model)

# Step 5: Predict Relative Risk (RR) for temperature, holding precipitation at median
temp_range <- seq(min(district_data$max.temp, na.rm = TRUE), 
                  max(district_data$max.temp, na.rm = TRUE), 
                  length.out = 100)

pred_temp <- crosspred(cb_temp, model, at = temp_range, cen = median(district_data$max.temp, na.rm = TRUE))

# Step 6: Extract and prepare prediction data
pred_data <- data.frame(
  average.temp = temp_range,
  rr = pred_temp$allRRfit,
  rr_lower = pred_temp$allRRlow,
  rr_upper = pred_temp$allRRhigh
)

# Step 7: Plot the results for the specific district
ggplot(pred_data, aes(x = average.temp, y = rr)) +
  geom_line(color = "black", size = 1) +
  geom_ribbon(aes(ymin = rr_lower, ymax = rr_upper),
              fill = "pink", alpha = 0.5) +
  geom_vline(xintercept = median(district_data$max.temp, na.rm = TRUE), 
             linetype = "dashed", color = "black") +
  annotate("text", x = median(district_data$max.temp, na.rm = TRUE), 
           y = max(pred_data$rr, na.rm = TRUE) * 0.95,
           label = paste("Reference =", round(median(district_data$max.temp, na.rm = TRUE), 1)),
           hjust = -0.1, vjust = 1) +
  labs(title = paste("Mean Temperature vs Malaria Relative Risk in", tools::toTitleCase("cuamba")),
       x = "Mean Temperature (°C)",
       y = "Relative Risk (RR)") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5))
